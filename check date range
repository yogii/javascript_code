var getTodaydate = function () {
    var today = new Date(),
    	timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone,
    	options = { timeZone: timeZone },
    	dateCheck = today.toLocaleDateString('en-AU', options),
    	c = dateCheck.split("/");
    return new Date(c[2], parseInt(c[1]) - 1, c[0]);
}

var timeConvertor = function (time) {
	var PM = time.match('pm') ? true : false
	time = time.split(':')
	var min = time[1]
	if (PM) {
		var hour = 12 + parseInt(time[0], 10)
		min = min.replace('pm', '')
	} else {
		if (time[0] == '12') {
			var hour = 0;
		} else {
			var hour = time[0]
		}

		min = min.replace('am', '')
	}
	return hour + ':' + min;
}

var getMinutesNow = function () {
	var timeNow = new Date();
	return timeNow.getHours() * 60 + timeNow.getMinutes();
}

var getMinutes = function (str) {
	var time = str.split(':');
	return time[0] * 60 + time[1] * 1;
}

var currentTimeIsBetweenFromToTime = function (time_from, time_to) {
	var now = getMinutesNow();
	var start = getMinutes(time_from);
	var end = getMinutes(time_to);
	if (start > end) end += getMinutes('24:00');
	return (now > start) && (now < end)
}

var checkWeekDatesWithCurrentDate = function (days, date, allday, time_from, time_to) {
	var status = false;
	var current_day = date.getDay();
	if (allday == 1) {
		days = ["0", "1", "2", "3", "4", "5", "6"];
	}
	if (_.indexOf(days, current_day.toString()) != -1) {
		status = true
	} else {
		return false;
	}
	if (allday == 1) {
		status = true;
	}
	console.log('status before time', status)
	if (time_from && time_to) {
		time_from = timeConvertor(time_from);
		time_to = timeConvertor(time_to);
		status = currentTimeIsBetweenFromToTime(time_from, time_to);
	}
	return status;
}

var getMonthDates = function (month_dates, date, allday, time_from, time_to, int = '') {

	if (allday == 1) {
		var day = [];
		for (var x = 1; x <= 31; x++) {
			day.push(x);
		}
		month_dates = day;
	}

	var current_date = date.getDate();
	var status = false;
	if (int == 'int') {
		var index = _.indexOf(month_dates, current_date);
	} else {
		var index = _.indexOf(month_dates, current_date.toString());
	}
	if (index != -1) {
		status = true;
	} else {
		return false;
	}
	if (time_from && time_to) {
		time_from = timeConvertor(time_from);
		time_to = timeConvertor(time_to);
		status = currentTimeIsBetweenFromToTime(time_from, time_to);
	}
	return status;
}

var UpdateGetWeeksInMonth = function (year, month) {
	const weeks = [],
		firstDate = new Date(year, month, 1),
		lastDate = new Date(year, month + 1, 0),
		numDays = lastDate.getDate();

	let dayOfWeekCounter = firstDate.getDay();

	for (let date = 1; date <= numDays; date++) {
		if (dayOfWeekCounter === 0 || weeks.length === 0) {
			weeks.push([]);
		}
		weeks[weeks.length - 1][dayOfWeekCounter] = date;
		dayOfWeekCounter = (dayOfWeekCounter + 1) % 7;
	}
	var a_weeks = [];
	weeks
		.filter((w) => !!w.length)
		.map((w) => w);
	var su = [], mo = [], tu = [],
		we = [], th = [], fr = [], sa = [];
	for (let day = 0; day < weeks.length; day++) {
		if (weeks[day][0]) {
			su.push(weeks[day][0])
		}
		if (weeks[day][1]) {
			mo.push(weeks[day][1])
		}
		if (weeks[day][2]) {
			tu.push(weeks[day][2])
		}
		if (weeks[day][3]) {
			we.push(weeks[day][3])
		}
		if (weeks[day][4]) {
			th.push(weeks[day][4])
		}
		if (weeks[day][5]) {
			fr.push(weeks[day][5])
		}
		if (weeks[day][6]) {
			sa.push(weeks[day][6])
		}
	}
	a_weeks.push(su)
	a_weeks.push(mo)
	a_weeks.push(tu)
	a_weeks.push(we)
	a_weeks.push(th)
	a_weeks.push(fr)
	a_weeks.push(sa)
	return a_weeks;
}
var getMonthlyDay = function (month_days, date, allday, time_from, time_to) {
	var year = date.getFullYear(),
		month = date.getMonth(),
		u_weeks = UpdateGetWeeksInMonth(year, month),
		status = false,
		self = this,
		month_dates = [];
	_.each(month_days, function (week_day, index) {
		var week_day_array = week_day.split(',')
		var day = week_day_array[0];
		var week_number = week_day_array[1];
		var currentday = u_weeks[day]
		var o_week_number = (week_number == '-1') ? (currentday.length - 1) : (week_number - 1);
		var currentdate = currentday[o_week_number];
		
		month_dates.push(currentdate)
	})
	month_dates.sort(function (a, b) { return a - b });
	status = getMonthDates(month_dates.toString(), date, allday, time_from, time_to, 'int')
	return status;
}
			
			
var checkDrawDate = function () {
    var content = node.get('content'),
    type_of_days = content.type_of_days,
    allday = content.allday,
    week_days = _.without(content.week_days, ''),
    month_dates = _.without(content.month_dates, ''),
    month_days = _.without(content.month_days, ''),
    everyday = _.without(content.everyday, ''),
    time_from = content.time_from,
    time_to = content.time_to,
    status = true,
    date = getTodaydate();
    switch (type_of_days) {
    case "weekly":
    	console.log('Weekly')
    	if (week_days.length > 0) {
    		status = checkWeekDatesWithCurrentDate(week_days, date, allday, time_from, time_to);
    	}
    	break;
    case "monthly_day":
    	console.log('monthly_day')
    	if (month_dates.length > 0) {
    		status = getMonthDates(month_dates, date, allday, time_from, time_to);
    	}
    	break;
    case "monthly":
    	console.log('monthly')
    	if (month_days.length > 0) {
    		status = getMonthlyDay(month_days, date, allday, time_from, time_to);
    	}
    	break;
    case "everyday":
    	console.log('everyday')
    	if (everyday.length > 0) {
    		status = checkWeekDatesWithCurrentDate(everyday, date, allday, time_from, time_to);
    		
    	}
    	break;
    default:
    	status = true;
    }
    return status;
}

//console.log('checkDrawDate', checkDrawDate())
